
## This file contains utility targets to be used to package distribution of something, like software
## It is intended to be included by another makefile:
##
##  include $(ODFI_MBUILD_HOME)/sw/makefile/Makefile.dist
##
## The including makefile then chooses when to call the here provided targets


SHELL = /bin/bash

## Name of this distribution
export DIST_NAME ?= dist

## Default version
export DIST_VERSION ?= undefinedversion

##$(shell cd $(1) && pwd)
## The resulting packages are the last tar.gz in each modules directory
find_top_distwork =  $(shell find $(dist-module-work-dir) -name "*")
find_last_archive =  $(shell res=`find $(1) -maxdepth 1 -name "*.tar.gz" -or -name "*.run"` && ls -1t $${res} | head -n1)
find_last_archive2 =  $(shell find $(1) -maxdepth 1 -name "*.tar.gz" -exec ls -1t {} + | head -n1)
DIST_PACKAGES ?=  $(foreach dir,$(DIST_MODULES),$(call find_last_archive,$(dir)))

## Module index to count the modules and create ordered names
#DIST_COUNT := 0

### Install variables
#############################
DIST_INSTALL_PACKAGES_DEPS_YUM ?=
DIST_INSTALL_PACKAGES_DEPS_APT ?=

## This target will prepare the modules
## The module names in the variable $(MODULES) are transformed to modulename.module, to be detected by generic target rule
##
## Output:
##   - $(DIST_NAME).tar.gz with all the other packages
##   - added sw/makefile/Makefile.dist (this makefile) for installation phase later
##   - If DIST_MODULE_NAME is set, we are in module context, so don't produce any install run script
##
## --xform 's/$(dist-module-work-dir)\/\(.*\)/\1/' $(find_top_distwork)
##############################################
MODULES_TARGETS = $(patsubst %,%.module,$(DIST_MODULES))
dist_prepare_modules:
dist_prepare_modules: $(MODULES_TARGETS)
	@echo -e "\e[93;1m[DIST] All modules prepared, archives are: $(DIST_PACKAGES)\e[0m"
	@echo -e "\e[93;1m[DIST] Packaging all modules together\e[0m"
	@echo -e "\e[93;1m[DIST] Copying base install script\e[0m"
	@if [[ -f $(DIST_NAME)-$(DIST_VERSION).run ]]; then rm -f $(DIST_NAME)-$(DIST_VERSION).run; fi
	@cp -f $(ODFI_MBUILD_HOME)/sw/makefile/install_base.sh $(DIST_NAME)-$(DIST_VERSION).run
	@tar cavz --xform 's/.*\/\(.*\.tar\.gz\)/\1/' --xform 's/.*\/\(.*\.run\)/\1/' $(DIST_PACKAGES) $(call find_last_archive2,./) --xform 's/.*\/\(sw\/makefile\/Makefile\.dist\)/\1/' $(ODFI_MBUILD_HOME)/sw/makefile/Makefile.dist >> $(DIST_NAME)-$(DIST_VERSION).run
	@echo -e "\e[93;1m[DIST] List of archive content for debugging purpose:\e[0m"
	@./$(DIST_NAME)-$(DIST_VERSION).run --list



## This is the generic call target to dist a module
## $(shell find $* -name "*.tar.gz" -exec ls -1t "{}" + | head -n1)
## override lastArchive = $(eval $(call find_last_archive_in_dir,$*))
####################################################################

%.gitmodule.module: override moduleName = $(notdir $*)
%.gitmodule.module:
	@echo -e "\e[93;1m-------------------------------------------------------\e[0m"
	@echo -e "\e[93;1m--[DIST]-- Preparing the module named $(moduleName) from GIT: $*\e[0m"
	@echo -e "\e[93;1m-------------------------------------------------------\e[0m"

%.module: override moduleName = $(notdir $*)
%.module:
	@echo -e "\e[93;1m-------------------------------------------------------\e[0m"
	@echo -e "\e[93;1m--[DIST]-- Preparing the module named $(moduleName) in $*\e[0m"
	@echo -e "\e[93;1m-------------------------------------------------------\e[0m"
	@if [[ -e $*/Makefile.$(moduleName).dist ]]; \
	then DIST_MODULE_NAME=$(moduleName) make -C $* dist -f Makefile.$(moduleName).dist; \
	elif [[ -e $*/Makefile.dist ]]; \
	then DIST_MODULE_NAME=$(moduleName) make -C $* dist -f Makefile.dist; \
	else DIST_MODULE_NAME=$(moduleName) make -C $* dist; fi;
	@echo -e "\e[93;1m-------------------------------------------------------\e[0m"



## This target will prepare the module for installation:
##   - Install the packages listed in $(DIST_INSTALL_PACKAGES_DEPS)

DO_PACKAGES ?= true

dist_install_prepare: IS_YUM = $(shell which yum)
dist_install_prepare: IS_APT = $(shell which apt-get)
dist_install_prepare:
	@echo -e "\e[93;1m[DIST] Install Packages prepare: $(DIST_INSTALL_PACKAGES_DEPS) (yum: $(IS_YUM), apt: $(IS_APT))\e[0m"
	@echo -e "\e[93;1m[DIST] Only supports yum for CentOS and apt for Debian for the moment\e[0m"
	@if [[ "$(DO_PACKAGES)" != "false" && "$(DIST_INSTALL_PACKAGES_DEPS_YUM)" != "" && "$(IS_YUM)" != "" ]]; \
	then \
		sudo yum install $(DIST_INSTALL_PACKAGES_DEPS_YUM); \
	elif [[ "$(DO_PACKAGES)" != "false" && "$(DIST_INSTALL_PACKAGES_DEPS_APT)" != "" && "$(IS_APT)" != "" ]]; \
	then \
		sudo apt-get install aptitude; \
		sudo aptitude install $(DIST_INSTALL_PACKAGES_DEPS_APT); \
	else \
		echo -e "\e[91;1m[DIST] No Packaging tool detected\e[0m"; \
	fi



##########################################
## Utility functions for modules work
##########################################
dist-module-work-dir := $(USER)-dist_work

## Log
##  calls: @echo "[$(DIST_MODULE_NAME)] $(1)"
## Usage:
##	$(call dist-module-log,"Text")
define dist-module-log
	@echo -e "\e[93;1m[$(DIST_MODULE_NAME)] $(1)\e[0m"
endef

## Default dist target for a module:
##   - Calls dist-module-prepare-work
#####################################


## Prepares the work directory
##   - Delete if exists, recreate
########################
define dist-module-prepare-work

	@if [[ -d $(dist-module-work-dir) ]]; then echo -e "\e[93;1m[DIST] Removing previous work directory ($(dist-module-work-dir))\e[0m"; rm -Rf $(dist-module-work-dir) ; fi
	@echo -e "\e[93;1m[DIST] Preparing work directory ($(dist-module-work-dir))\e[0m"
	@mkdir $(dist-module-work-dir)
endef

## Copy a file or a folder to the work dir bin/ folder
## Ex: $(call dist-module-add-bin,wonderful_script.sh)  $(call dist-module-add-bin,folder container)
##########################################
define dist-module-add-bin
	@echo -e "\e[93;1m[DIST] Calling dist-module-add-bin for '$(1)'\e[0m"
	@if [[ ! -d $(dist-module-work-dir)/bin ]]; then mkdir $(dist-module-work-dir)/bin ; fi
	@for f in $(1); do \
	if [[ -d $${f} ]]; then cp -vRf $${f}/* $(dist-module-work-dir)/bin; else cp -fvp $${f} $(dist-module-work-dir)/bin/; fi; \
	done;
endef

## Copy a file or a folder to the work dir
################################################

## @$(call dist-module-add,"files")
define dist-module-add
	for f in $(1); do \
	if [[ -d $${f} ]]; then cp -Rf $${f} $(dist-module-work-dir); else  cp -fp $${f} $(dist-module-work-dir); fi; \
	done
endef

## Copies files list to destination folder
## Destination will be created as a folder
## @$(call dist-module-add-to,"files",destination)
define dist-module-add-to
	@if [[ ! -d $(dist-module-work-dir)/$(2) ]]; then mkdir -p $(dist-module-work-dir)/$(2) ; fi
	for f in $(1); do \
	if [[ -d $${f} ]]; then cp -Rf $${f} $(dist-module-work-dir)/$(2); else cp -fp $${f} $(dist-module-work-dir)/$(2); fi; \
	done
endef

## Copies a file to another file (usefuil to change file name)
## Destination parent folders will be created as a folders, but it must be a file
## @$(call dist-module-copy-to,file,destinationFile)
define dist-module-copy-to
	@if [[ ! -d $(shell dirname $(dist-module-work-dir)/$(2)) ]]; then mkdir -p $(shell dirname $(dist-module-work-dir)/$(2)) ; fi
	@cp -fp $(1) $(dist-module-work-dir)/$(2);
endef


## Perform Pakaging
##  - Copies the Makefile.dist alongside in the work directory, or local Makefile if there is one
##  - Output: $(DIST_MODULE_NAME)-$(DIST_VERSION).tar.gz
#@echo "[DIST] Packaging to: `echo $(dist-module-work-dir) | sed c\\$(DIST_MODULE_NAME)-$(DIST_VERSION).tar.gz`"
##########################
define dist-module-package

	@if [[ -e Makefile.$(DIST_MODULE_NAME).dist ]]; \
		then $(call dist-module-add,Makefile.$(DIST_MODULE_NAME).dist); \
	elif [[ -e Makefile.dist ]]; \
		then $(call dist-module-add,Makefile.dist); \
	elif [[ -e Makefile ]]; \
		then $(call dist-module-add,Makefile); \
	fi;

	@tar cav --xform "s/$(dist-module-work-dir)/$(DIST_MODULE_NAME)-$(DIST_VERSION)/" -f $(DIST_MODULE_NAME)-$(DIST_VERSION).tar.gz  $(dist-module-work-dir)/
endef


##########################################
## Git Help
##########################################

## Returns the stand

##
## Clones or updates a git repository, that will be used as packaged module
##########################
define dist-git-module
	@echo -e "\e[93;1m[DIST] Cloning/Updating git module from $(1) into $(3), using branch/tag $(2)\e[0m"
	@if [[ -d $(3) ]]; then \
		echo -e "\e[93;1m[DIST] Updating  $(3) from origin\e[0m"; \
		cd $(3) && git remote set-url origin $(1) && git pull; \
	else \
		git clone -b $(2) $(1) $(3); \
	fi;
endef


##########################################
## Utility functions for install
##########################################
#define dist-install-tcl-

#endef


